version: '3.7'

services:

    redpanda:
        image: docker.redpanda.com/redpandadata/console
        hostname: redpanda
        container_name: moodle-redpanda
        ports:
            - "8080:8080"
        environment:
            KAFKA_BROKERS: kafka:29092
            KAFKA_TLS_INSECURESKIPTLSVERIFY: true
            KAFKA_SCHEMAREGISTRY_ENABLED: true
            KAFKA_SCHEMAREGISTRY_URLS: http://schema-registry:8081
            KAFKA_SCHEMAREGISTRY_USERNAME: client
            KAFKA_SCHEMAREGISTRY_PASSWORD: client
            KAFKA_SCHEMAREGISTRY_TLS_ENABLED: false
            KAFKA_SCHEMAREGISTRY_TLS_INSECURESKIPTLSVERIFY: true
        depends_on:
            - kafka
            - schema-registry
            - zookeeper
        restart: always
        networks:
            - suscribers-network



    zookeeper:
        image: confluentinc/cp-zookeeper:6.1.1
        hostname: zookeeper
        container_name: moodle-zookeeper
        ports:
            - "2181:2181"
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
        restart: always
        networks:
            - suscribers-network



    kafka:
        image: confluentinc/cp-enterprise-kafka:6.1.1
        hostname: kafka
        container_name: moodle-kafka
        tmpfs: /kafka/kafka-logs
        depends_on:
            - zookeeper
        ports:
            - "9092:9092"
        environment:
            KAFKA_HEAP_OPTS: -Xmx3G -Xms1G
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
            KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
            KAFKA_DELETE_TOPIC_ENABLE: "true"
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
            KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
            KAFKA_LOG_RETENTION_MS: -1
            KAFKA_MESSAGE_MAX_BYTES: 10485880
            KAFKA_NUM_PARTITIONS: 1
            CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:9092
            CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
            CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
            CONFLUENT_METRICS_ENABLE: "true"
            CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        restart: always
        networks:
            - suscribers-network


    schema-registry:
        image: confluentinc/cp-schema-registry:6.1.1
        container_name: moodle-schema-registry
        ports:
            - "8081:8081"
        environment:
            SCHEMA_REGISTRY_HOST_NAME: schema-registry
            SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
            SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
        depends_on:
            - kafka
        restart: always
        networks:
            - suscribers-network


    usuarios-crud:
        build: ./usuariosCRUD
        container_name: usuarios-crud
        restart: always
        ports:
            - "8090:8080"
        environment:
            - "kafka=kafka"
            - "schema-registry=schema-registry"
        healthcheck:
            test: [ "CMD-SHELL", "curl -f http://localhost:8082/actuator/health || exit 1" ]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 30s
        networks:
            - suscribers-network


    sucripciones-crud:
        build: ./suscripcionesCRUD
        container_name: suscripciones-crud
        restart: always
        ports:
            - "8091:8080"
        environment:
            - "kafka=kafka"
            - "schema-registry=schema-registry"
        healthcheck:
            test: [ "CMD-SHELL", "curl -f http://localhost:8082/actuator/health || exit 1" ]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 30s
        networks:
            - suscribers-network


    suscriptores-get:
        build: ./suscriptoresGET
        container_name: suscriptores-get
        restart: always
        depends_on:
        - suscriptores-get-db
        ports:
            - "8092:8080"
        environment:
            - "kafka=kafka"
            - "schema-registry=schema-registry"
            - "suscriptores-get-db=suscriptores-get-db"
        healthcheck:
            test: [ "CMD-SHELL", "curl -f http://localhost:8082/actuator/health || exit 1" ]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 30s
        networks:
            - suscribers-network


    pcs:
        build: ./PCSsuscriptores
        container_name: pcs-suscriptores
        restart: always
        ports:
            - "8093:8080"
        environment:
            - "kafka=kafka"
            - "schema-registry=schema-registry"
        healthcheck:
            test: [ "CMD-SHELL", "curl -f http://localhost:8082/actuator/health || exit 1" ]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 30s
        networks:
            - suscribers-network


    agregador-suscripciones:
        build: ./agregadorSuscripciones
        container_name: agregador-suscripciones
        restart: always
        ports:
            - "8094:8080"
        environment:
            - "kafka=kafka"
            - "schema-registry=schema-registry"
        healthcheck:
            test: [ "CMD-SHELL", "curl -f http://localhost:8082/actuator/health || exit 1" ]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 30s
        networks:
            - suscribers-network


    mixbi:
        build: ./MixbiUsuarioSuscripcion
        container_name: mixbi
        restart: always
        ports:
            - "8095:8080"
        environment:
            - "kafka=kafka"
            - "schema-registry=schema-registry"
        healthcheck:
            test: [ "CMD-SHELL", "curl -f http://localhost:8082/actuator/health || exit 1" ]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 30s
        networks:
            - suscribers-network

    suscriptores-get-db:
        image: postgres:14.1-alpine
        container_name: suscriptores-get-db
        restart: always
        environment:
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=postgres
            - POSTGRES_DB=suscribers
        ports:
            - "5432:5432"
        volumes:
            - data:/var/lib/postgresql/data
        networks:
            - suscribers-network



    grafana:
        image: grafana/grafana
        container_name: grafana
        ports:
            - 3000:3000
        restart: unless-stopped
        environment:
            - GF_SECURITY_ADMIN_USER=admin
            - GF_SECURITY_ADMIN_PASSWORD=admin
        volumes:
            - ./grafana:/etc/grafana/provisioning/datasources
        networks:
            - suscribers-network

    prometheus:
        image: prom/prometheus
        container_name: prometheus
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--web.enable-lifecycle'
        ports:
            - 9090:9090
        restart: unless-stopped
        volumes:
            - ./prometheus:/etc/prometheus
            - prom_data:/prometheus
        networks:
            - suscribers-network


    node-exporter:
        image: prom/node-exporter:latest
        container_name: node-exporter
        restart: unless-stopped
        volumes:
            - /proc:/host/proc:ro
            - /sys:/host/sys:ro
            - /:/rootfs:ro
        command:
            - '--path.procfs=/host/proc'
            - '--path.rootfs=/rootfs'
            - '--path.sysfs=/host/sys'
            - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
        expose:
            - 9100
        networks:
            - suscribers-network
    app:
        build:
            dockerfile: Dockerfile
        container_name: app
        volumes:
            - logfiles-volume:/app/logs


    filebeat:
        image: elastic/filebeat:7.17.8
        container_name: filebeat
        volumes:
            - ./config/beats/filebeat.config.yml:/usr/share/filebeat/filebeat.yml:ro
            - logfiles-volume:/var/log/app_logs
        environment:
            LOGSTASH_HOST: logstash:5044


    logstash:
        image: logstash:7.17.8
        container_name: logstash
        ports:
            - 9600:9600
            #- 5044:5044 # Puerto Beats
        environment:
            ELASTICSEARCH_HOST: elasticsearch:9200
        volumes:
            - ./config/logstash/app-logs.conf:/usr/share/logstash/pipeline/app-logs.conf:ro
            - ./config/logstash/templates:/usr/share/logstash/templates


    elasticsearch:
        image: elasticsearch:7.17.8
        container_name: elasticsearch
        ports:
            - 9200:9200
        environment:
            discovery.type: single-node
            ES_JAVA_OPTS: "-Xms1g -Xmx1g"
        volumes:
            - elasticsearch:/usr/share/elasticsearch/data


    kibana:
        image: kibana:7.17.8
        container_name: kibana
        ports:
            - 5601:5601


volumes:
    data:
        driver: local
    prom_data: {}
    elasticsearch:
    logfiles-volume:


networks:
    suscribers-network:
        driver: bridge
