server:
  port: 9050

topic-in-0: suscriptions
topic-out-0: suscriptionsAggregated

spring:
  application:
    name: agregadorSuscripciones

  cloud:
    function:
      definition: aggregateMessages;

    stream:
      poller:
        fixedDelay: 5000

      bindings:
        supplier-out-0:
          destination: ${topic-in-0}
          producer:
            useNativeEncoding: true
        aggregateMessages-in-0:
          destination: ${topic-in-0}
          consumer:
            concurrency: 1
            useNativeDecoding: true
        aggregateMessages-out-0:
          destination: ${topic-out-0}
          producer:
            useNativeEncoding: true

      kafka:
        streams:
          bindings:
            aggregateMessages-in-0:
              consumer:
                keySerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
                valueSerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
                applicationId: ${spring.application.name}

          binder:
            configuration:
              commit.interval.ms: 100
              session.timeout.ms: 10000
              schema.registry.url: http://localhost:8081
              auto.register.schemas: true
              default.key.serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
              default.value.serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde

  kafka:
    producer:
      properties:
        key.serializer: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerializer
        value.serializer: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerializer
        schema.registry.url: http://localhost:8081
